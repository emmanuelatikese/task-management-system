@page "/"
@page "/Task"

@using TaskManagerApp.Shared.Models
@inject HttpClient http
@using System.Net.Http.Json;
@using System.Threading.Tasks;
@using System.Text.Json;

@using System;
@using System.Collections.Generic;
@using System.Linq;



<PageTitle>Home</PageTitle>

<nav class="navbar navbar-expand-lg bg-body-tertiary " style="border-radius:10px;">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">Taskmanager</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavAltMarkup" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
            <div class="navbar-nav">
                <a class="nav-link active" aria-current="page" href="/">Home</a>
                <a class="nav-link" href="/personal">Personal</a>
                <a class="nav-link" href="/work">Work</a>
                <a class="nav-link" href="/wishlist">WishList</a>
                
            </div>
        </div>
        
    </div>
</nav>


<section class="vh-100">
    <div class="container py-5 h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col">
                <div class="card" id="list1" style="border-radius: .75rem; background-color: #eff1f2;">
                    <div class="card-body py-4 px-4 px-md-5">

                        
                        <div class="pb-2">
                            <div class="card">
                                <div class="card-body">
                                    <div class="d-flex flex-row align-items-center">
                                        <input type="text" class="form-control form-control-lg" id="exampleFormControlInput1"
                                               placeholder="Add new..." @bind="taskname">
                                        <a href="#!" data-mdb-toggle="tooltip" title="Set due date">
                                            <i class="fas fa-calendar-alt fa-lg me-3"></i>
                                        </a>
                                        <div>
                                            <button type="button" class="btn btn-primary" @onclick="@(AddTask)">Add</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="holder">
                            <select class="form-select" id="floatingSelect" aria-label="Floating label select example" style="width:120px;" @onchange="@(SetOrganization)">

                                <option value="personal">Personal</option>
                                <option value="work">Work</option>
                                <option value="wishlist">WishList</option>
                            </select>


                        </div>
                        

                        <hr class="my-4">

                        <div class="d-flex justify-content-end align-items-center mb-4 pt-2 pb-3">
                            <p class="small mb-0 me-2 text-muted">Filter</p>
                            <select class="select">
                                <option value="1">All</option>
                                <option value="2">Completed</option>
                                <option value="3">Active</option>
                                <option value="4">Has due date</option>
                            </select>
                            <p class="small mb-0 ms-4 me-2 text-muted">Sort</p>
                            <select class="select">
                                <option value="1">Added date</option>
                                <option value="2">Due date</option>
                            </select>
                            <a href="#!" style="color: #23af89;" data-mdb-toggle="tooltip" title="Ascending">
                                <i class="fas fa-sort-amount-down-alt ms-2"></i>
                            </a>
                        </div>
                        @if (taskList?.Tasklist != null)
                        {
                            @foreach (var item in taskList.Tasklist)
                            {
                                <ul class="list-group list-group-horizontal rounded-0">
                                    <li class="list-group-item d-flex align-items-center ps-0 pe-3 py-1 rounded-0 border-0 bg-transparent">
                                        <div class="form-check">
                                            <input class="form-check-input me-0" type="checkbox" value="" id="flexCheckChecked2"
                                                   aria-label="..." />
                                        </div>
                                    </li>
                                    <li class="list-group-item px-3 py-1 d-flex align-items-center flex-grow-1 border-0 bg-transparent">
                                        <p class="lead fw-normal mb-0">@item.Title</p>
                                    </li>
                                    <li class="list-group-item px-3 py-1 d-flex align-items-center border-0 bg-transparent">
                                        <div class="py-2 px-3 me-2 border border-warning rounded-3 d-flex align-items-center bg-light">
                                            <p class="small mb-0">
                                                <a href="#!" data-mdb-toggle="tooltip" title="Due on date">
                                                    <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32"><path fill="currentColor" d="M16 2a14 14 0 1 0 14 14A14 14 0 0 0 16 2Zm0 26a12 12 0 1 1 12-12a12 12 0 0 1-12 12Z" /><path fill="currentColor" d="M15 8h2v11h-2zm1 14a1.5 1.5 0 1 0 1.5 1.5A1.5 1.5 0 0 0 16 22z" /></svg>
                                                </a>
                                                @item.Deadline
                                            </p>
                                        </div>
                                    </li>
                                    <li class="list-group-item ps-3 pe-0 py-1 rounded-0 border-0 bg-transparent">
                                        <div class="d-flex flex-row justify-content-end mb-1">
                                            <a href="#!" class="text-info" data-mdb-toggle="tooltip" title="Edit todo">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 1024 1024"><path fill="currentColor" d="M832 512a32 32 0 1 1 64 0v352a32 32 0 0 1-32 32H160a32 32 0 0 1-32-32V160a32 32 0 0 1 32-32h352a32 32 0 0 1 0 64H192v640h640V512z" /><path fill="currentColor" d="m469.952 554.24l52.8-7.552L847.104 222.4a32 32 0 1 0-45.248-45.248L477.44 501.44l-7.552 52.8zm422.4-422.4a96 96 0 0 1 0 135.808l-331.84 331.84a32 32 0 0 1-18.112 9.088L436.8 623.68a32 32 0 0 1-36.224-36.224l15.104-105.6a32 32 0 0 1 9.024-18.112l331.904-331.84a96 96 0 0 1 135.744 0z" /></svg>
                                            </a>
                                            <a href="/" class="text-danger" data-mdb-toggle="tooltip" title="Delete todo" @onclick="@(()=>DeleteTask(item))">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32"><path fill="currentColor" d="M12 12h2v12h-2zm6 0h2v12h-2z" /><path fill="currentColor" d="M4 6v2h2v20a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8h2V6zm4 22V8h16v20zm4-26h8v2h-8z" /></svg>
                                            </a>
                                        </div>
                                        <div class="text-end text-muted">
                                            <a href="#!" class="text-muted" data-mdb-toggle="tooltip" title="Organization">
                                                <p class="small mb-0">
                                                    @if(item.Organization == "personal")
                                                    {

                                                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" fill-rule="evenodd" d="M8 7a4 4 0 1 1 8 0a4 4 0 0 1-8 0Zm0 6a5 5 0 0 0-5 5a3 3 0 0 0 3 3h12a3 3 0 0 0 3-3a5 5 0 0 0-5-5H8Z" clip-rule="evenodd" /></svg>
                                                    }
                                                    else if(item.Organization == "work")
                                                    {
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M2 21V6h6V2h8v4h6v15H2Zm8-15h4V4h-4v2Z" /></svg>
                                                    }
                                                    else
                                                    {
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M5 20h11v2H5m6-17h-1a2 2 0 0 0-2 2h5a2 2 0 0 0-2-2m5 3h6a2 2 0 0 1-2 2h-1a4 4 0 0 0-4 4v1a4 4 0 0 1-4 4h-1a4 4 0 0 1-4-4H4a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2m2 2H4v3h2m13-8a2 2 0 0 1 2 2h1a2.9 2.9 0 0 0-3-3a2 2 0 0 1-2-2h-1a2.9 2.9 0 0 0 3 3" /></svg>
                                                    }

                                             @item.Organization</p>
                                            </a>
                                        </div>
                                    </li>
                                </ul>
                            }
                        }
                        else
                        {
                            <p>No tasks available</p>
                        }

                        
                       

                    </div>
                </div>
            </div>
        </div>
    </div>
</section>


@code {
    [Parameter] public string taskname { get; set; }
    //public List<TaskItem>? TaskList = new List<TaskItem>();
    public TaskList taskList = new();
    public PersonalList personlist = new();
    public Wishlist wishlist = new();
    public Work worklist = new();

    public string val { get; set; } = "personal";

    public void SetOrganization(ChangeEventArgs e)
    {
        val =  e.Value.ToString();
    }

    public async Task AddTask()
    {
        if (!string.IsNullOrEmpty(taskname))
        {

            TaskItem newTask = new TaskItem { Title = taskname, Organization=val};
            taskList.Tasklist.Add(newTask);
            if (newTask.Organization == "personal")
            {
                personlist.PeraonItems.Add(newTask);
            }
            else if (newTask.Organization == "work")
            {
                worklist.WorkItem.Add(newTask);
            }
            else
            {
                wishlist.WishItems.Add(newTask);
            }
            var response = await http.PostAsJsonAsync("api/Task/AddTask", newTask);
            

            if (response.IsSuccessStatusCode)
            {
                
                taskname = "";
                var status = await response.Content.ReadFromJsonAsync<Status>();
                await OnInitializedAsync();
                Console.WriteLine("it work.");
            }
            else
            {
                Console.WriteLine("it didn't work");

            }

        }
    }

    public async Task DeleteAllTasks()
    {
        var response = await http.DeleteAsync("api/Task/DeleteAll");

        if (response.IsSuccessStatusCode)
        {

            var status = await response.Content.ReadFromJsonAsync<Status>();
            await OnInitializedAsync();

        }


    }

    public async Task DeleteTask(TaskItem task)
    {
        var response = await http.DeleteAsync($"api/Task/DeleteTaskItem/{task.Id}");

        if (response.IsSuccessStatusCode)
        {
            if (task.Organization == "personal")
            {
                personlist.PeraonItems.Remove(task);
            }
            else if (task.Organization == "work")
            {
                worklist.WorkItem.Remove(task);
            }
            else
            {
                wishlist.WishItems.Remove(task);
            }
            var status = await response.Content.ReadFromJsonAsync<Status>();
            await OnInitializedAsync();
        }

    }

    public async Task<TaskItem> GetTaskById(int id)
    {
        var response = await http.GetAsync($"api/Task/{id}");

        if (response.IsSuccessStatusCode)
        {
            var task = await response.Content.ReadFromJsonAsync<TaskItem>();
            return task;
        }
        else
        {

            return null;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            string response = "api/Task/GetTaskAll";
            taskList = await http.GetFromJsonAsync<TaskList>(response);
        }
        catch (Exception)
        {

        };
    }
}




