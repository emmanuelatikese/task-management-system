@page "/"
@page "/Task"

@using TaskManagerApp.Shared.Models
@inject HttpClient http
@using System.Net.Http.Json;
@using System.Threading.Tasks;
@using System.Text.Json;
@using TaskManagerApp.Shared.JsonResponse;
@using System;
@using System.Collections.Generic;
@using System.Linq;



<PageTitle>Home</PageTitle>

<nav class="navbar navbar-expand-lg bg-body-tertiary " style="border-radius:10px;">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">Taskmanager</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavAltMarkup" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
            <div class="navbar-nav">
                <a class="nav-link active" aria-current="page" href="/">Home</a>
                <a class="nav-link" href="/personal">Personal</a>
                <a class="nav-link" href="/work">Work</a>
                <a class="nav-link" href="/wishlist">WishList</a>
                
            </div>
        </div>
        
    </div>
</nav>


<section class="vh-100">
    <div class="container py-5 h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col">
                <div class="card" id="list1" style="border-radius: .75rem; background-color: #eff1f2;">
                    <div class="card-body py-4 px-4 px-md-5">

                        
                        <div class="pb-2">
                            <div class="card">
                                <div class="card-body">
                                    <div class="d-flex flex-row align-items-center">
                                        <input type="text" class="form-control form-control-lg" id="exampleFormControlInput1"
                                               placeholder="Add new..." @bind="taskname">
                                        <a href="#!" data-mdb-toggle="tooltip" title="Set due date">
                                            <i class="fas fa-calendar-alt fa-lg me-3"></i>
                                        </a>
                                        <div>
                                            <button type="button" class="btn btn-primary" @onclick="@(AddTask)">Add</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="holder">
                            <select class="form-select" id="floatingSelect" aria-label="Floating label select example" style="width:120px;">

                                <option value="1">Personal</option>
                                <option value="2">Work</option>
                                <option value="3">WishList</option>
                            </select>


                        </div>
                        

                        <hr class="my-4">

                        <div class="d-flex justify-content-end align-items-center mb-4 pt-2 pb-3">
                            <p class="small mb-0 me-2 text-muted">Filter</p>
                            <select class="select">
                                <option value="1">All</option>
                                <option value="2">Completed</option>
                                <option value="3">Active</option>
                                <option value="4">Has due date</option>
                            </select>
                            <p class="small mb-0 ms-4 me-2 text-muted">Sort</p>
                            <select class="select">
                                <option value="1">Added date</option>
                                <option value="2">Due date</option>
                            </select>
                            <a href="#!" style="color: #23af89;" data-mdb-toggle="tooltip" title="Ascending">
                                <i class="fas fa-sort-amount-down-alt ms-2"></i>
                            </a>
                        </div>
                        @if (taskList?.Tasklist != null)
                        {
                            @foreach (var item in taskList.Tasklist)
                            {
                                <ul class="list-group list-group-horizontal rounded-0">
                                    <li class="list-group-item d-flex align-items-center ps-0 pe-3 py-1 rounded-0 border-0 bg-transparent">
                                        <div class="form-check">
                                            <input class="form-check-input me-0" type="checkbox" value="" id="flexCheckChecked2"
                                                   aria-label="..." />
                                        </div>
                                    </li>
                                    <li class="list-group-item px-3 py-1 d-flex align-items-center flex-grow-1 border-0 bg-transparent">
                                        <p class="lead fw-normal mb-0">@item.Title</p>
                                    </li>
                                    <li class="list-group-item px-3 py-1 d-flex align-items-center border-0 bg-transparent">
                                        <div class="py-2 px-3 me-2 border border-warning rounded-3 d-flex align-items-center bg-light">
                                            <p class="small mb-0">
                                                <a href="#!" data-mdb-toggle="tooltip" title="Due on date">
                                                    <i class="fas fa-hourglass-half me-2 text-warning"></i>
                                                </a>
                                                @item.Deadline
                                            </p>
                                        </div>
                                    </li>
                                    <li class="list-group-item ps-3 pe-0 py-1 rounded-0 border-0 bg-transparent">
                                        <div class="d-flex flex-row justify-content-end mb-1">
                                            <a href="#!" class="text-info" data-mdb-toggle="tooltip" title="Edit todo">
                                                <i class="fas fa-pencil-alt me-3"></i> 
                                            </a>
                                            <a href="#!" class="text-danger" data-mdb-toggle="tooltip" title="Delete todo">
                                                <i class="fas fa-trash-alt"></i>
                                            </a>
                                        </div>
                                        <div class="text-end text-muted">
                                            <a href="#!" class="text-muted" data-mdb-toggle="tooltip" title="Organization">
                                                <p class="small mb-0"><i class="fas fa-info-circle me-2"></i>@item.Organization</p>
                                            </a>
                                        </div>
                                    </li>
                                </ul>
                            }
                        }
                        else
                        {
                            <p>No tasks available</p>
                        }

                        
                       

                    </div>
                </div>
            </div>
        </div>
    </div>
</section>


@code {
    [Parameter] public string taskname { get; set; }
    //public List<TaskItem>? TaskList = new List<TaskItem>();
    public TaskList taskList = new();



    public async Task AddTask()
    {
        if (!string.IsNullOrEmpty(taskname))
        {
            TaskItem newTask = new TaskItem { Title = taskname };
            taskList.Tasklist.Add(newTask);

            var response = await http.PostAsJsonAsync("api/Task/AddTask", newTask);

            if (response.IsSuccessStatusCode)
            {
                taskname = "";
                var status = await response.Content.ReadFromJsonAsync<Status>();
                Console.WriteLine("it work.");
            }
            else
            {
                Console.WriteLine("it didn't work");

            }

        }
    }

    public async Task DeleteAllTasks()
    {
        var response = await http.DeleteAsync("api/Task/DeleteAll");

        if (response.IsSuccessStatusCode)
        {
            var status = await response.Content.ReadFromJsonAsync<Status>();


        }


    }

    public async Task DeleteTask(int id)
    {
        var response = await http.DeleteAsync($"api/Task/{id}");

        if (response.IsSuccessStatusCode)
        {
            var status = await response.Content.ReadFromJsonAsync<Status>();
        }

    }

    public async Task<TaskItem> GetTaskById(int id)
    {
        var response = await http.GetAsync($"api/Task/{id}");

        if (response.IsSuccessStatusCode)
        {
            var task = await response.Content.ReadFromJsonAsync<TaskItem>();
            return task;
        }
        else
        {

            return null;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            string response = "api/Task/GetTaskAll";
            taskList = await http.GetFromJsonAsync<TaskList>(response);
        }
        catch (Exception)
        {

        };
    }
}




