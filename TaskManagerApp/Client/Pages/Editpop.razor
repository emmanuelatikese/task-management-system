@page "/Edit-pop/{edit:int}"
@using TaskManagerApp.Shared.Models
@inject HttpClient http
@using System.Net.Http.Json;
@using System.Threading.Tasks;
@using System.Text.Json;
@using System.Timers;
@using System;
@using System.Collections.Generic;
@using System.Linq;


<NavMenu/>

<form style="
display:flex;
flex-direction:column;
gap:10px;
 margin-top:20px;
">
    <div class="form-group" >
        <label for="exampleFormControlInput1">Title</label>
        <input class="form-control" id="exampleFormControlTextarea1" style="padding:5px; border-radius:5px; border:none;" @bind="taskname" />
    </div>

    <div class="form-group">
        <label for="exampleFormControlSelect1">Organization</label>
        <select class="form-control" id="exampleFormControlSelect1" aria-label="Floating label select example" style="width:120px;" 
        @onchange="@(SetOrganization)">
            @if(taskList.Organization == "personal"){
            <option value="personal" selected>Personal</option>
            }
            else{
            <option value="personal">Personal</option>
            }

            @if(taskList.Organization == "work"){
            <option value="work" selected>Work</option>
            }
            else{
            <option value="work">Work</option>
            }
            @if(taskList.Organization == "wishlist"){
            <option value="wishlist" selected>WishList</option>
            }
            else{
            <option value="wishlist">WishList</option>
            }

            
           
        </select>
    </div>
    <label for="exampleFormControlSelect1">Deadline</label>
    <input type="datetime-local" placeholder="Select Date and Time" class="Datepicker"
           style="padding:5px; border-radius:5px; border:none;" @bind-value="selectTimeDate" />


    <a href="/" onclick="@(AddTask)">

        <button type="button" class="btn btn-primary" >Edit</button>

    </a>
</form>

@code {
    [Parameter]
    public int edit{ get; set; }
    [Parameter]
    public string taskname { get; set; }





    public DateTime selectTimeDate { get; set; } = DateTime.Today.AddDays(1).Add(new TimeSpan(0, 0, 0));
    public TaskItem? taskList { get; set; } = new();


    public string val { get; set; }

    public void SetOrganization(ChangeEventArgs e) => val = e.Value.ToString();

    public async Task GetTaskById()
    {


        var response = await http.GetAsync($"api/Task/GetTaskById/{edit}");

        if (response.IsSuccessStatusCode)
        {
            taskList = await response.Content.ReadFromJsonAsync<TaskItem>();
            val = taskList.Organization;
            taskname = taskList.Title;
        }
        else
        {
            // Handle error cases
        }
    }


    public async Task AddTask()
    {


        taskList.Title = char.ToUpper(taskname[0]) + taskname.Substring(1);
        taskList.Deadline = selectTimeDate < DateTime.Now ? DateTime.Today.AddDays(1).Add(new TimeSpan(0, 0, 0)) : selectTimeDate;
        taskList.Organization = val;
        var response = await http.PostAsJsonAsync("api/Task/AddUpdateTask", taskList);

 
        if (response.IsSuccessStatusCode)
        {


            var status = await response.Content.ReadFromJsonAsync<Status>();

            Console.WriteLine("it work.");
        }
        else
        {
            Console.WriteLine("it didn't work");

        }

    }


    protected override async Task OnInitializedAsync()
    {

        try
        {

            await GetTaskById();
            

        }
        catch (Exception)
        {

        };
    }

}
